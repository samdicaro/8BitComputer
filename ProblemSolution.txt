**Multiplication by Repeated Addition**

C code:

#include <stdio.h>
#include <stdlib.h>

int main(){
        int a = 7;
        int b = 4;
        int acc = 0;
        for(int i=b;i!=0;i--){
                acc = acc + a;
        }
        printf("Sum of %d * %d = %d.\n", a, b, acc);
        return 0;
}

Assembly:

li $t0, 7
li $t1, 4
li $t2, 0

for:
	beq $t1, $0, finish
	nop
	addu $t2, $t2, $t0
	addiu $t1, $t1, -1
	j for
	nop

finish:
	nop

This solution uses only 4 registers: t0, t1, t2, and 0.
The computer will use the A, B, and ACC registers.
The instructions used are load a, load b, branch equals, add, jump, and nop.
The Boot ROM will store the 6 opcodes.
lda:	0000
ldb:	0001
beq0:	0010
addacc:	0011
jmp:	0100
nop:	0101

Program Counter starts at 0110.
RAM:
Address 		Data Word
0_0000_0000_0000	0000_0000 # lda
0_0000_0000_0001	0000_0001 # ldb
0_0000_0000_0010	0000_0010 # beq0
0_0000_0000_0011	0000_0011 # addacc
0_0000_0000_0100	0000_0100 # jmp
0_0000_0000_0101	0000_0101 # nop
------------------------------------
0_0000_0000_0110	0000_0000 # load a
0_0000_0000_0111	0000_0111 # immediate value to load a with
0_0000_0000_1000	0000_0001 # load b
0_0000_0000_1001	0000_0100 # immediate value to load b with
0_0000_0000_1010	0000_0010 # beq0
0_0000_0000_1011	0001_0001 # memory address of the program to jump to
0_0000_0000_1100	0000_0011 # add the value in the accumulator to a
0_0000_0000_1101	xxxx_xxxx # add to b
0_0000_0000_1110	1111_1111 # immediate value
0_0000_0000_1111	0000_0100 # jump to address
0_0000_0001_0000	0000_1010 # jump address
0_0000_0001_0001	0000_0101 # nop???